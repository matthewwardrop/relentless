#!/bin/python2

import sys, os
sys.path.insert(0,'..')

import argparse
import git
import relentless

def get_params(lparams):
	params = {}
	for param_set in lparams:
		for param in param_set.split(';'):
			key,value = param.split("=")
			params[key] = eval(value)
	return params

def get_ranges(lranges):
	ranges = []
	for param_set in lranges:
		params = {}
		for param in param_set.split(';'):
			key,value = param.split("=")
			params[key] = eval(value)
		ranges.append(params)
	return ranges


working_dir = "_relentless"

parser = argparse.ArgumentParser(description='Use relentless to test performance of your code.')
parser.add_argument('project', type=str, help='The project to be analysed by relentless.')
#parser.add_argument('integers', metavar='N', type=int, nargs='+',
#                   help='an integer for the accumulator')

parser.add_argument('--type', default=None)
parser.add_argument('--wrapper', default=None)
parser.add_argument('--ref', default="master")
parser.add_argument('--cache', default=True, type=bool)

subparsers = parser.add_subparsers(title='actions', description='The action to be performed by relentless.', dest='action')

parser_run = subparsers.add_parser('run')
parser_run.add_argument('tasks', default=0, type=int, nargs="*")
parser_run.add_argument('--params', default=[], nargs="+")
parser_run.add_argument('--print-info', dest='print_info', default=True, type=bool)

parser_annotate = subparsers.add_parser('annotate')
parser_annotate.add_argument('--output', default='history')
parser_annotate.add_argument('--count', default=1, type=int)
parser_annotate.add_argument('--branches', default=None, nargs='*', type=str)
parser_annotate.add_argument('--since', default=None, type=str)
parser_annotate.add_argument('--nprocs', default=None, type=int)

parser_dependence = subparsers.add_parser('dependence')
parser_dependence.add_argument('--output', default='dependence')
parser_dependence.add_argument('--count', default=1, type=int)
parser_dependence.add_argument('--tasks', default=None, type=int, nargs="+")
parser_dependence.add_argument('--ranges', default=[], nargs="+")
parser_dependence.add_argument('--params', default=[], nargs="+")
parser_dependence.add_argument('--nprocs', default=None, type=int)

parser_compare = subparsers.add_parser('compare')
parser_compare.add_argument('ref')
parser_compare.add_argument('--base', default='master')
parser_compare.add_argument('--output', default=None)
parser_compare.add_argument('--count', default=1, type=int)
parser_compare.add_argument('--fields', default=['score'], nargs='+')
parser_compare.add_argument('--tasks', default=None, type=int, nargs="+")
parser_compare.add_argument('--params', default=[], nargs="+")
parser_compare.add_argument('--nprocs', default=None, type=int)

args = parser.parse_args()

try:
	git.Repo(os.path.dirname(args.project))
	t = relentless.GitTester(args.project, computation_type=args.type, computation_wrapper=args.wrapper, working_dir=working_dir, cache=args.cache, ref=args.ref)
except Exception as e:
 	t = relentless.Tester(args.project, computation_type=args.type, computation_wrapper=args.wrapper, working_dir=working_dir, cache=args.cache)

if args.action == "run":
	for task in args.tasks:
		t.iterate(task, params=get_params(args.params), print_info=args.print_info)

elif args.action == "annotate":
	if isinstance(t,relentless.GitTester):
		t.annotate_commits(count=args.count, output=args.output, branches=args.branches, since=args.since, iter_opts={'nprocs': args.nprocs})
	else:
		raise ValueError("Annotation is only available for projects stored in git repositories.")

elif args.action == "dependence":
	t.plot_dependence(output=args.output, count=args.count, tasks=args.tasks, ranges=get_ranges(args.ranges), params=get_params(args.params), iter_opts={'nprocs': args.nprocs})

elif args.action == "compare":
	if isinstance(t,relentless.GitTester):
		t.compare(ref=args.ref, base=args.base, output=args.output, count=args.count, fields=args.fields, tasks=args.tasks, params=get_params(args.params), iter_opts={'nprocs': args.nprocs})
	else:
		raise ValueError("Annotation is only available for projects stored in git repositories.")
